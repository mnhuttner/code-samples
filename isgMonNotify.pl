#!/usr/bin/perl
#-----------------------------------------------------------------------------
my $title = 'isgMonNotify.pl';
my $desc  = 'universal notifier for XXX events';
my $ver   = '1.0.6';
my $author = 'mhuttner';
#-----------------------------------------------------------------------------
$|++;
use strict;
use MIME::Lite;
use Data::Dumper;
use Getopt::Long;
#-----------------------------------------------------------------------------
my (%conf,%alerts,%opt,@c);
myInit();
myMail();
1;
#-----------------------------------------------------------------------------
sub myInit {
  $ENV{TZ} = "America/New_York";
  chomp($conf{hn}  = `hostname -f`);
  chomp($conf{dt}  = `date`);
  chomp($conf{who} = `whoami`);
  @{$conf{colors}} = qw(red black maroon olive green aqua teal blue navy fuschia purple);
  # use this format to tailor notifications
  my %notify = (
     'mhuttner@nodomain.com' => "Huttner, Michael",
     'jdoe1@nodomain.com'    => "John Doe 1",
     'jdoe2@nodomain.com'    => "John Doe 2",
     'jdoe3@nodomain.com'    => "John Doe 3",
     'jdoe4@nodomain.com'    => "John Doe 4",
  );
  $conf{notify} = join(", ", sort keys %notify);

  # defaults
  $conf{verbose} = 0;
  $conf{debug}   = 0;
  $conf{send}    = 1;
  $conf{from}    = 'IGSupport@nodomain.com';
  $conf{to}      = $conf{notify};
  GetOptions(
    # flags
    'verbose'    => \$conf{verbose},
    'debug'      => \$conf{debug},
    'usage|help' => \$conf{usage},
    'test'       => \$conf{test},
    'version'    => \$conf{version},
    'send!'      => \$conf{send},
    # args
    'env:s'      => \$conf{env},
    'to:s'       => \$conf{to},
    'from:s'     => \$conf{from},
    'severity:s' => \$conf{severity},
    'source:s'   => \$conf{source},
    'summary:s'  => \$conf{summary},
    'msg:s'      => \$conf{msg},
  );
  myVersion() if $conf{version};
  if (defined $conf{env} and $conf{env} !~ /prod|qa|stage|dev/i) {
    myUsage("Invalid env:  must be [prod|qa|stage|dev]");
  }
  if (defined $conf{severity} and $conf{severity} !~ /crit|err|warn|info|debug/i) {
    myUsage("Invalid severity:  must be [crit|err|warn|info|debug]");
  }
  if ($conf{test}) {
    $conf{env}       = "stage";
    $conf{severity}  = "WARNING";
    $conf{source}    = "checkSSL.pl";
    $conf{summary}   = "TEST NOTIFICATION";
    $conf{msg}       = 'Wed Dec  7 13:57:51 UTC 2016,stage-vmwebapp02.dp-wnp.com,10.30.1.131,-1010,ERROR:Mar  2 23:59:59 2014 GMT, testing
    Wed Dec  7 13:57:51 UTC 2016,stage-vmwebapp01.wp-hmi.cl.datapipe.net,10.30.1.130,-1010,ERROR:Mar  2 23:59:59 2014 GMT';
  }

  print "# CONF: " . Dumper(\$conf{data}) if $conf{debug};

  if ((!defined $conf{env} or
      !defined $conf{severity} or
      !defined $conf{source} or
      !defined $conf{summary} or
      !defined $conf{msg}) or $conf{usage}) {
    myUsage();
  }
  myParseMsg();
}
#-----------------------------------------------------------------------------
sub myParseMsg {
  $conf{table} = "\n  <table align=left border=1>\n";
  for my $row (split/\n/,$conf{msg}) {
    $conf{table} .= "    <tr align=left>\n";
    @c = @{$conf{colors}};
    my @cols = (split/,/,$row);
    for (@cols) {
      my $color = getColor();
      $conf{table} .= "      <td style=\"padding-left:5px;color:$color;font-size:12pt;\">$_</td>\n";
    }
    $conf{table} .= "    </tr>\n";
  }
  $conf{table} .= "  </table>\n";
}
#-----------------------------------------------------------------------------
sub getColor {
  my $cnt = scalar @c;
  if ($cnt == 0) { @c = @{$conf{colors}}; }
  my $color = shift @c; #  || die "Out of colors!\n";
  return $color;
}
#-----------------------------------------------------------------------------
sub myMail {
  $conf{subject} = "ISG Alert: $conf{severity}:$conf{env} $conf{source} $conf{type} -> $conf{summary}";
  $conf{data}   = qq{
    <table>
    <table align=left border="1">
  };
  $conf{data} .= $conf{table};
  $conf{data}   .= qq{
    </table>
    <p>
    <table align=left>
     <tr>
      <td style="padding-left:5px;color:black;font-weight:bold;font-size:10pt;">Generated by:</td>
      <td style="padding-left:5px;color:gray;font-weight:normal;font-size:10pt;font-style:italic;">$conf{source} @ $conf{hn}</td>
     </tr>
    </table>
    <p><p><p>
    </table>
  };
  #
  my $msg = MIME::Lite->new(
    From     => $conf{from},
    To       => $conf{to},
    #Cc       => $conf{cc},
    Subject  => $conf{subject},
    Type     => 'text/html',
    Encoding => 'base64',
    'X-Mailer' => "Mail::Sendmail version $Mail::Sendmail::VERSION",
    Data     => $conf{data},
    Debug    => 1,
  );
  if ($conf{send}) {
    print "#-> Sending to $conf{to}\n";
    $msg->send;
  } else {
    print "#-> NOT sending email\n";
  }
  print "# CONF: " . Dumper(\$conf{data}) if $conf{debug};
}
#-----------------------------------------------------------------------------
sub myVersion {
  print "$ver\n"; exit;
}
#-----------------------------------------------------------------------------
sub myUsage {
  my $msg = shift || "";
  if ($msg ne "") { $msg = "ERROR: $msg\n"; }
  print <<EOF;
$title($ver) - $desc
$msg
Usage: $title [options|args]
Options:
  -verbose|debug|usage|help
  -test		[execute test scenario, see example below]
  -send | --no-send
Args:
  -env		[prod,qa,stage,dev]
  -severity	[crit,err,warn,info,debug]
  -source	[originator of alert/message]
  -summary	[short description of alert]
  -msg		[details of event(s), handles multiple-line CSV delimited text]
  * = required

Defaults:
  -to		ISGSupport\@nodomain.com
  -from		ISGSupport\@nodomain.com
  -send		1 (true, send the email, --no-send will negate)

   Eg:
    $title -test # equivalent to below
    $title -version
    $title  -env stage -severity warning -source checkSSL -summary "expired cert" -msg 'Wed Dec  7 13:57:51 UTC 2016,stage-vmwebapp02.dp-wnp.com,10.30.1.131,-1010,ERROR:Mar  2 23:59:59 2014 GMT
    Wed Dec  7 13:57:51 UTC 2016,stage-vmwebapp01.wp-hmi.cl.datapipe.net,10.30.1.130,-1010,ERROR:Mar  2 23:59:59 2014 GMT' 


EOF
exit 1;
}
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
